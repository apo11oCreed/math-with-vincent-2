{"version":3,"sources":["logo.svg","components/buttons.jsx","components/challengeWindow.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuButton","props","Fragment","className","this","classesContainer","containerInnerText","classesSpan","spanInnerText","React","Component","ChallengeWindow","state","sectionTitle","handleClick","bind","mathtype","setState","onClick","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,gRCEtBC,E,YAEjB,WAAYC,GAAQ,qEACVA,I,sEAIN,OAAQ,kBAAC,IAAMC,SAAP,KAAgB,4BAAQC,UAAWC,KAAKH,MAAMI,kBAAmBD,KAAKH,MAAMK,mBACpF,6BAAM,0BAAMH,UAAWC,KAAKH,MAAMM,aAAcH,KAAKH,MAAMO,qB,GAR3BC,IAAMC,W,OCGzBC,E,YACjB,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CACTC,aAAc,0BAElB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALJ,E,yEAQPC,GACRZ,KAAKa,SAAS,CAAEJ,aAAcG,M,+BAGxB,IAAD,OACCH,EAAeT,KAAKQ,MAAMC,aAChC,OAAQ,6BACR,4BAAQV,UAAU,wBAAwBe,QAAS,kBAAM,EAAKJ,YAAY,cAlB9D,MAmBZ,6BAAM,0BAAMX,UAAU,iDAAhB,MACN,4BAAQA,UAAU,wBAAwBe,QAAS,kBAAM,EAAKJ,YAAY,iBAnBzD,WAoBjB,6BAAM,0BAAMX,UAAU,kDAAhB,MACN,kBAAC,EAAD,CAAYE,iBAAiB,wBAAwBE,YAAY,iDAAiDD,mBAtBtG,MAsByIE,cAAc,IAAIU,QAAS,kBAAM,EAAKJ,YAAY,eACvM,kBAAC,EAAD,CAAYT,iBAAiB,wBAAwBE,YAAY,iDAAiDD,mBAtBjG,WAsByIE,cAAc,IAAIU,QAAS,kBAAM,EAAKJ,YAAY,kBAC5M,8BACA,iCACA,4BAAKD,U,GAxBgCJ,IAAMC,WCQ9BS,E,iLAEjB,OACE,yBAAKhB,UAAU,OACjB,kBAAC,IAAD,KACE,mDACA,kBAAC,EAAD,MACE,4BAAQA,UAAU,kBAChB,yBAAKiB,IAAKC,IAAMlB,UAAU,WAAWmB,IAAI,gB,GARlBb,IAAMC,WCDnBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.aaf497a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9964bf42.svg\";","import React from 'react';\n\nexport default class MenuButton extends React.Component {\n    // eslint-disable-next-line\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (<React.Fragment><button className={this.props.classesContainer}>{this.props.containerInnerText}\n        <br /><span className={this.props.classesSpan}>{this.props.spanInnerText}</span></button>\n        </React.Fragment>)\n    }\n}\n","import React from 'react';\n// eslint-disable-next-line\nimport MenuButton from './buttons';\nlet addButtonText = \"Add\";\nlet subtractButtonText = \"Subtract\";\nexport default class ChallengeWindow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sectionTitle: 'Select Add or Subtract'\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(mathtype) {\n        this.setState({ sectionTitle: mathtype });\n    }\n\n    render() {\n        const sectionTitle = this.state.sectionTitle;\n        return (<div>\n        <button className=\"navigation_main col-6\" onClick={() => this.handleClick('Addition')}>{addButtonText}\n        <br /><span className=\"navigation_main-icon glyphicon glyphicon-plus\">+</span></button>\n        <button className=\"navigation_main col-6\" onClick={() => this.handleClick('Subtraction')}>{subtractButtonText}\n        <br /><span className=\"navigation_main-icon glyphicon glyphicon-minus\">-</span></button>\n        <MenuButton classesContainer=\"navigation_main col-6\" classesSpan=\"navigation_main-icon glyphicon glyphicon-minus\" containerInnerText={addButtonText} spanInnerText=\"+\" onClick={() => this.handleClick('Addition')} />\n        <MenuButton classesContainer=\"navigation_main col-6\" classesSpan=\"navigation_main-icon glyphicon glyphicon-minus\" containerInnerText={subtractButtonText} spanInnerText=\"-\" onClick={() => this.handleClick('Subtraction')} />\n        <main>\n        <section>\n        <h1>{sectionTitle}</h1>\n        </section>\n        </main>\n        </div>)\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\n//import Row from 'react-bootstrap/Row';\n//import Col from 'react-bootstrap/Col';\n// eslint-disable-next-line\nimport MenuButton from './components/buttons';\nimport ChallengeWindow from './components/challengeWindow';\n\n//let addButtonText=\"<span>add</span>\";\n//let subtractButtonText=\"<span>subtract</span>\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n    <Container>\n      <h1>Math With Vincent 2</h1>\n      <ChallengeWindow />\n        <header className=\"App-header row\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </Container>\n    </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}